pipeline{
 agent any
 environment
 {
     dockerRegistry= 'http://localhost:8082'
     kubecredentials= "kubernetes-dev"
     credentials= 'nexus'
 }
 stages
  {
      stage ('repository clone')
      {
          steps {
              /*git credentialsId: 'gitcreds', url: 'https://github.com/cassador/devops-docker.git'*/
              checkout scm
          }
      }
      /*stage ('source coude build')
      {
          steps {

          }
      }*/
      stage (' docker image build & push to repo')
      {
          steps{
              dir('activemq') {
                script {
                    sh 'ls -la'
                    /*docker.build("centos-jdk8")*/
                    /* adding for additional complex testing*/
                    docker.withRegistry('http://localhost:8082', credentials) {
                        def customImage = docker.build("pdi/activemq:1.0.0")
                        customImage.push()
                    }
                }
              }
          }
      }
      stage(' activemq deployment')
      {
        steps
        {
          dir('activemq')
          {
            script
            {
              withCredentials([file(credentialsId: kubecredentials, variable: 'kubeconfig')])
              {
                def volumeExist = sh(script: 'kubectl get pv -n default --kubeconfig $kubeconfig | grep "ebs" | wc -l ', returnStatus: true)
                if (volumeExist == 0) {
                  sh(script: 'kubectl apply -f persistent-volume.yaml' + ' --kubeconfig $kubeconfig')
                  sh(script: 'kubectl apply -f persistent-volume-claim.yaml' + ' --kubeconfig $kubeconfig')
                }
                else
                {
                  def volumeClaimExist = sh(script: 'kubectl get pvc -n default --kubeconfig $kubeconfig | grep "activemq-pv-claim" | wc -l ', returnStatus: true)
                  if (volumeClaimExist == 0)
                  {
                    sh(script: 'kubectl apply -f persistent-volume-claim.yaml' + ' --kubeconfig $kubeconfig')
                  }
                }
                sh(script: 'kubectl apply -f activemq-statefulset.yaml' + ' --kubeconfig $kubeconfig')
                sh(script: 'kubectl apply -f activemq-service.yaml' + ' --kubeconfig $kubeconfig')
              }
            }
          }
        }
      }

  }
}
